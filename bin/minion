#!/usr/bin/env -S perl -l

use lib qw(. lib);
use strict;
use warnings;

use Cwd;
use Fcntl qw(F_GETFL F_SETFL O_NONBLOCK);
use Getopt::Long qw(GetOptionsFromArray);
use IO::Select;

use Minion::Aws;
use Minion::Aws::Fleet;
use Minion::Aws::Image;
use Minion::Aws::Instance;
use Minion::Pos::Allocation;
use Minion::Run::Runner;
use Minion::StaticFleet;


my $PROGNAME = 'minion';

my $PREPARE_BASE = '*ubuntu*20.04*amd64*server*';
my $PREPARE_DURATION = 7200;
my $PREPARE_DESCRIPTION = "Benchmark image for OSDI'22";
my $PREPARE_DISK = 32;
my $PREPARE_REGION = 'eu-central-1';
my $PREPARE_KEY = 'default';
my $PREPARE_NAME = 'minion-avalanche-solana';
my $PREPARE_SIZE = 10;
my $PREPARE_SECGROUP = 'default';
my $PREPARE_TYPE = 'c5.9xlarge';
my $PREPARE_USER = 'ubuntu';
my @PREPARE_REGIONS = qw(
    af-south-1
    ap-east-1
    ap-northeast-1
    ap-northeast-2
    ap-northeast-3
    ap-south-1
    ap-southeast-1
    ap-southeast-2
    ca-central-1
    eu-central-1
    eu-north-1
    eu-south-1
    eu-west-1
    eu-west-2
    eu-west-3
    me-south-1
    sa-east-1
    us-east-1
    us-east-2
    us-west-1
    us-west-2
);
my @PREPARE_ALLINSTALLS = (
    [ 'install-geth-accounts', '--number=10000' ]
);
my @PREPARE_INSTALLS = (
    [ 'install-algorand'  ],
    [ 'install-avalanche' ],
    [ 'install-diablo'    ],
    [ 'install-libra'     ],
    [ 'install-poa'       ],
    [ 'install-quorum'    ],
    [ 'install-solang'    ],
    [ 'install-solana'    ],
    [ 'install-solidity'  ]
);


my $BOOT_IMAGE    = $PREPARE_NAME;
my $BOOT_USER     = $PREPARE_USER;
my $BOOT_KEY      = $PREPARE_KEY;
my $BOOT_SIZE     = 5;
my $BOOT_DURATION = 36000;
my $BOOT_SECGROUP = 'default';
my $BOOT_TYPE     = 'c5.4xlarge';
my $BOOT_DISK     = undef;
my @BOOT_INSTALLS = (
	[ 'install-algorand'  ],
    [ 'install-avalanche' ],
    [ 'install-diablo'    ],
    [ 'install-diem'    ],
    [ 'install-poa'       ],
    [ 'install-quorum'    ],
    [ 'install-solang'    ],
    [ 'install-solana'    ],
    [ 'install-solidity'  ]
);
my @BOOT_REGIONS  = @PREPARE_REGIONS;


my $RUN_SYNC = undef;
my $RUN_USER = $BOOT_USER;
my $RUN_RESULT = sub {
    my ($sec, $min, $hour, $day, $mon, $year) = localtime(time());

    $year += 1900;
    $mon += 1;

    return sprintf("%04d-%02d-%02d-%02d-%02d-%02d.results.tar.gz",
		   $year, $mon, $day, $hour, $min, $sec);
};
my @RUN_INSTALLS = ();
my @RUN_CHAINS = qw(algorand diem quorum-ibft quorum-raft poa libra solana avalanche);
my @RUN_BREAKPOINTS = qw(boot install sync deploy chain benchmark);


# Utility functions -----------------------------------------------------------

my $VERBOSE = 0;

sub message
{
    my ($format, @args) = @_;

    if ($VERBOSE >= 1) {
	printf($format . "\n", @args);
    }
}

sub runlog
{
    my ($ref) = @_;

    if ($VERBOSE < 2) {
	return $ref;
    }

    return sub {
	my ($str) = @_;
	my ($line);

	if (!defined($str)) {
	    return;
	}

	foreach $line (split("\n", $str)) {
	    printf("%s\n", $line);
	}
    };
}

sub cmdlog
{
    my ($str) = @_;
    my ($line);

    if ($VERBOSE < 3) {
	return;
    } elsif (!defined($str)) {
	return;
    }

    foreach $line (split("\n", $str)) {
	printf("%s\n", $line);
    }
}

sub fatal
{
    my ($format, @args) = @_;

    printf(STDERR "%s: " . $format . "\n", $PROGNAME, @args);
    printf(STDERR "Please type '%s --help' for more information\n", $0);

    exit (1);
}


# Run action ------------------------------------------------------------------

sub _run
{
    my ($chain, $workload, $fids, %params) = @_;
    my (%fleets, $region, $fleet, $instance, $proc, $pgrp, $runner, $job, $wd);
    my ($gfleet, $primary, $diablo, $nodes, $out, $err, $pid);
    my ($dir, $base, $full, $compress, $fh);

    if ($params{RESULT} =~ m!^(.*/)?([^/]+)(\.(?:tar\.|t)(?:gz|xz|bzip2))$!) {
	($dir, $base, $compress) = ($1, $2, $3);
    } elsif ($params{RESULT} =~ m!^(.*/)?([^/]+)(\.(?:gz|xz|bzip2))$!) {
	($dir, $base, $compress) = ($1, $2, $3);
    } elsif ($params{RESULT} =~ m!^(.*/)?([^/]+)$!) {
	($dir, $base) = ($1, $2);
	$compress = undef;
    } else {
	fatal("failed to parse result path '%s'", $params{RESULT});
    }

    if (defined($dir)) {
	$full = $dir . $base;
    } else {
	$full = $base;
    }

    if (-e $full) {
	fatal("result '%s' already exists", $full);
    }

    if (-e $params{RESULT}) {
	fatal("result '%s' already exists", $params{RESULT});
    }

    foreach $region (keys(%$fids)) {
	if ($fids->{$region} =~ /^sfr-/) {
	    $fleet = Minion::Aws::Fleet->new(
		$fids->{$region},
		LOG    => \&cmdlog,
		REGION => $region,
		USER   => $params{USER}
		);

	    $fleets{$region} = $fleet;
	    next;
	}

	if ($fids->{$region} =~ /^\d+\.\d+\.\d+\.\d+/) {
	    $fleet = Minion::StaticFleet->new([
		map {
		    Minion::Aws::Instance->new(
			'i-00000000000', $_, $_, 'sfr-00000000000',
			LOG    => \&cmdlog,
			REGION => $region,
			USER   => $params{USER}
			);
		} split(',', $fids->{$region})
	    ]);

	    $fleets{$region} = $fleet;
	    next;
	}
    }

    $pgrp = Minion::System::Pgroup->new([]);

    foreach $region (keys(%fleets)) {
	if ($fleets{$region}->can('instances')) {
	    message("fetching '%s' in '%s'", $fids->{$region}, $region);
	    $proc = $fleets{$region}->instances();
	    $pgrp->add($proc);
	}
    }

    map { $_->get() } $pgrp->waitall();

    $pgrp = Minion::System::Pgroup->new([]);

    foreach $region (keys(%fleets)) {
	foreach $instance ($fleets{$region}->members()) {
	    message("joining: %s ('%s') ...", $instance->public_ip(), $region);

	    $proc = Minion::System::Process->new(sub {
		while ($instance->execute(
			   [ 'true' ],
			   STDERR => '/dev/null'
		       )->wait()) {
		    sleep(1);
		}
	    });

	    $pgrp->add($proc);
	}
    }

    $pgrp->waitall();

    $gfleet = Minion::StaticFleet->new([
	map { $_->members() } values(%fleets)
    ]);

    $diablo = Minion::StaticFleet->new([
	map { ($_->members())[0] } values(%fleets)
    ]);

    $primary = ($diablo->members())[0];

    $nodes = Minion::StaticFleet->new([
	map { ($_->members())[1 .. (scalar($_->members())-1)] } values(%fleets)
    ]);

    if (grep { $_ eq 'boot' } @{$params{BREAKPOINTS}}) {
	printf("breakpoint: boot\n");
	printf("press ENTER to continue or Ctrl-C to stop");
	local $| = 1;
	<STDIN>;
    }

    $runner = Minion::Run::Runner->new(
	LOCAL  => [ 'script/local/'  ],
	REMOTE => [ 'script/remote/' ]
	);

    if (scalar(@{$params{INSTALLS}}) > 0) {
	unshift(@{$params{INSTALLS}}, [ 'prepare-install' ]);
    }

    foreach $job (@{$params{INSTALLS}}) {
	message("running: '%s' ...", join(' ', @$job));

	$out = '';
	$err = '';
	$proc = $runner->run(
	    $gfleet, $job,
	    STDOUT  => runlog(\$out), STDERR  => runlog(\$err),
	    STDOUTS => runlog(\$out), STDERRS => runlog(\$err)
	    );

	if ($proc->wait() != 0) {
	    printf("%s", $out);
	    printf(STDERR "%s", $err);
	    fatal("failed to run: '%s'", join(' ', @$job));
	}
    }

    if (grep { $_ eq 'install' } @{$params{BREAKPOINTS}}) {
	printf("breakpoint: install\n");
	printf("press ENTER to continue or Ctrl-C to stop");
	local $| = 1;
	<STDIN>;
    }

    if (defined($params{SYNC})) {
	$pgrp = Minion::System::Pgroup->new([]);

	foreach $instance ($diablo->members()) {
	    message("syncing '%s' -> 'synced' on %s ('%s')", $params{SYNC},
		    $instance->public_ip(), $instance->region());

	    $proc = Minion::System::Process->new(sub {
		$instance->execute(
		    [ 'rm', '-rf', 'synced' ],
		    STDERR => '/dev/null'
		    )->wait();

		exit ($instance->send(
			  [ $params{SYNC} ],
			  TARGET => 'synced'
		      )->wait() >> 8);
	    });

	    $pgrp->add($proc);
	}

	if (grep { $_->exitstatus() != 0 } $pgrp->waitall()) {
	    fatal("failed to  sync '%s'", $params{SYNC});
	}
    }

    if (grep { $_ eq 'sync' } @{$params{BREAKPOINTS}}) {
	printf("breakpoint: sync\n");
	printf("press ENTER to continue or Ctrl-C to stop");
	local $| = 1;
	<STDIN>;
    }

    message("register diablo secondaries:");
    foreach $instance ($diablo->members()) {
	message("  %s ('%s')", $instance->public_ip(), $instance->region());
    }
    if ($runner->run($diablo, [ 'behave-diablo', 'secondary' ])->wait() != 0) {
	fatal("failed to register diablo secondaries");
    }

    message("register diablo primary:");
    message("  %s ('%s')", $primary->public_ip(), $primary->region());
    if ($runner->run(
	    $primary, [ 'behave-diablo', 'primary', $workload ]
	)->wait() != 0) {

	fatal("failed to register diablo primary");
    }

    message("register %s nodes:", $chain);
    foreach $instance ($nodes->members()) {
	message("  %s ('%s')", $instance->public_ip(), $instance->region());
    }
    if ($runner->run($nodes, [ 'behave-' . $chain ])->wait() != 0) {
	fatal("failed to register %s nodes", $chain);
    }

    message("deploying ...");
    if ($runner->run($gfleet, [ 'deploy' ])->wait() != 0) {
	fatal("failed to deploy");
    }

    if (grep { $_ eq 'deploy' } @{$params{BREAKPOINTS}}) {
	printf("breakpoint: deploy\n");
	printf("press ENTER to continue or Ctrl-C to stop");
	local $| = 1;
	<STDIN>;
    }

    $pid = $$;

    $SIG{INT} = sub {
	if ($$ == $pid) {
	    message("stopping diablo ...");
	    $runner->run($nodes, [ 'diablo', 'stop' ])->wait();

	    message("killing %s blockchain ...", $chain);
	    $runner->run($nodes, [ $chain, 'kill' ])->wait();
	}

	exit (1);
    };

    message("starting %s blockchain ...", $chain);
    if ($runner->run($nodes, [ $chain, 'start' ])->wait() != 0) {
	fatal("failed to start %s blockchain", $chain);
    }

    if (grep { $_ eq 'chain' } @{$params{BREAKPOINTS}}) {
	printf("breakpoint: chain\n");
	printf("press ENTER to continue or Ctrl-C to stop");
	local $| = 1;
	<STDIN>;
    }

    message("starting diablo ...");
    if ($runner->run($diablo, [ 'diablo', 'start' ])->wait() != 0) {
	fatal("failed to start diablo", $chain);
    }

    message("benchmark is running ...");
    if ($runner->run($diablo, [ 'diablo', 'wait' ])->wait() != 0) {
	fatal("benchmark failed");
    }

    if (grep { $_ eq 'benchmark' } @{$params{BREAKPOINTS}}) {
	printf("breakpoint: benchmark\n");
	printf("press ENTER to continue or Ctrl-C to stop");
	local $| = 1;
	<STDIN>;
    }

    message("stopping %s blockchain ...", $chain);
    if ($runner->run($nodes, [ $chain, 'stop' ])->wait() != 0) {
	fatal("failed to stop %s blockchain", $chain);
    }

    mkdir($full);
    message("saving results in '%s/results.json.gz' ...", $full);
    if ($primary->recv(
	    [ 'deploy/diablo/primary/results.json.gz'],
	    TARGET => $full . '/results.json.gz'
	)->wait() != 0) {

	fatal("failed to save '%s' from %s ('%s') into '%s'",
	      "deploy/diablo/primary/results.json.gz", $primary->public_ip(),
	      $primary->region(), $full . '/results.json.gz');
    }

    system("cd '$full' ; gunzip *.gz");
    system('cp', $workload, $full . '/workload.yaml');

    message("saving chain name in '%s' ...", $full . '/name.txt');
    if (!open($fh, '>', $full . '/name.txt')) {
	fatal("failed to open '%s' : %s", $full . '/name.txt', $!);
    } else {
	printf($fh "%s\n", $chain);
	close($fh);
    }

    $pgrp = Minion::System::Pgroup->new([]);

    message("saving primary logs from %s in '%s' ...", $primary->public_ip(),
	    $full);

    $proc = $primary->recv(
	[ 'deploy/diablo/primary/out' ],
	TARGET => $full . '/diablo-primary-' . $primary->public_ip() .
	          '-out.log'
	);
    $pgrp->add($proc);

    $proc = $primary->recv(
	[ 'deploy/diablo/primary/err' ],
	TARGET => $full . '/diablo-primary-' . $primary->public_ip() .
	          '-err.log'
	);
    $pgrp->add($proc);

    foreach $instance ($diablo->members()) {
	message("saving secondary logs from %s in '%s' ...",
		$instance->public_ip(), $full);

	$proc = $instance->recv(
	    [ 'deploy/diablo/secondary0/out' ],
	    TARGET => $full . '/diablo-secondary-' . $instance->public_ip() .
	              '-out.log'
	    );
	$pgrp->add($proc);

	$proc = $instance->recv(
	    [ 'deploy/diablo/secondary0/err' ],
	    TARGET => $full . '/diablo-secondary-' . $instance->public_ip() .
	              '-err.log'
	    );
	$pgrp->add($proc);
    }

    foreach $instance ($nodes->members()) {
	message("saving node logs from %s in '%s' ...",
		$instance->public_ip(), $full);

	$proc = $instance->recv(
	    [ 'deploy/' . $chain . '/*/out' ],
	    TARGET => $full . '/chain-' . $instance->public_ip() .
	              '-out.log'
	    );
	$pgrp->add($proc);

	$proc = $instance->recv(
	    [ 'deploy/' . $chain . '/*/err' ],
	    TARGET => $full . '/chain-' . $instance->public_ip() .
	              '-err.log'
	    );
	$pgrp->add($proc);
    }

    if (grep { $_->exitstatus() != 0 } $pgrp->waitall()) {
	fatal("failed to save logs");
    }

    message("saving topology in '%s' ...", $full . '/topology.txt');
    if (!open($fh, '>', $full . '/topology.txt')) {
	fatal("failed to open '%s' : %s", $full . '/topology.txt', $!);
    }

    printf($fh "primary:%s:%s\n", $primary->public_ip(), $primary->region());
    foreach $instance ($diablo->members()) {
	printf($fh "secondary:%s:%s\n", $instance->public_ip(),
	       $instance->region());
    }
    foreach $instance ($nodes->members()) {
	printf($fh "blockchain:%s:%s\n", $instance->public_ip(),
	       $instance->region());
    }

    close($fh);

    if (defined($compress)) {
	message("compressing results in '%s' ...", $params{RESULT});

	if (defined($dir)) {
	    $wd = getcwd();
	    chdir($dir);
	}

	system('tar', '--create', '--auto-compress', '--file',
	       $base . $compress, $base);
	system('rm', '-rf', $base);

	if (defined($dir)) {
	    chdir($wd);
	}
    }

    return 0;
}

sub run
{
    my ($chain, $workload, @ids);
    my (@breakpoints, @installs, $result, $sync, $user);
    my ($id, %fids, $breakpoint);

    GetOptionsFromArray(
	\@_,
	'b|breakpoint=s' => \@breakpoints,
	'i|install=s'    => \@installs,
	'r|result=s'     => \$result,
	'S|sync=s'       => \$sync,
	'u|user=s'       => \$user,
	'v|verbose'      => sub { $VERBOSE += 1; }
	);

    ($chain, $workload, @ids) = @_;

    if (!defined($chain)) {
	fatal("missing chain operand");
    } elsif (!grep { $chain eq $_ } @RUN_CHAINS) {
	fatal("invalid chain operand: '%s'", $chain);
    } elsif (!defined($workload)) {
	fatal("missing workload operand");
    } elsif (scalar(@ids) == 0) {
	fatal("missing id operands");
    }

    foreach $id (@ids) {
	if ($id =~ /^(sfr(?:-[0-9a-f]+)+)@(..-[^-]+-\d+)$/) {
	    $fids{$2} = $1;
	    next;
	}

	if ($id =~ /^(\d+\.\d+\.\d+\.\d+(?:,\d+\.\d+\.\d+\.\d+)*)@(..-[^-]+-\d+)$/) {
	    $fids{$2} = $1;
	    next;
	}

	fatal("invalid id operand: '%s'", $id);
    }

    if (scalar(@breakpoints) > 0) {
	foreach $breakpoint (@breakpoints) {
	    if (!grep { $breakpoint eq $_ } @RUN_BREAKPOINTS) {
		fatal("invalid value '%s' for '--breakpoint' option",
		      $breakpoint);
	    }
	}
    }

    if (scalar(@installs) == 0) {
	@installs = @RUN_INSTALLS;
    } else {
	@installs = map { [ split(',', $_) ] } @installs;
    }

    if (!defined($result)) {
	$result = $RUN_RESULT->();
    } elsif (-d $result) {
	$result .= '/' . $RUN_RESULT->();
    }

    if (!defined($sync)) {
	$sync = $RUN_SYNC;
    }

    if (!defined($user)) {
	$user = $BOOT_USER;
    }

    return _run(
	$chain, $workload, \%fids,
	BREAKPOINTS => \@breakpoints,
	INSTALLS    => \@installs,
	RESULT      => $result,
	SYNC        => $sync,
	USER        => $user
	);
}

# Pos Run action ------------------------------------------------------------------

sub _pos_run
{
    my ($chain, $workload, $fids, %params) = @_;
    my (%fleets, $region, $fleet, $instance, $proc, $pgrp, $runner, $job, $wd);
    my ($gfleet, $primary, $diablo, $nodes, $out, $err, $pid);
    my ($dir, $base, $full, $compress, $fh);

    if ($params{RESULT} =~ m!^(.*/)?([^/]+)(\.(?:tar\.|t)(?:gz|xz|bzip2))$!) {
	($dir, $base, $compress) = ($1, $2, $3);
    } elsif ($params{RESULT} =~ m!^(.*/)?([^/]+)(\.(?:gz|xz|bzip2))$!) {
	($dir, $base, $compress) = ($1, $2, $3);
    } elsif ($params{RESULT} =~ m!^(.*/)?([^/]+)$!) {
	($dir, $base) = ($1, $2);
	$compress = undef;
    } else {
	fatal("failed to parse result path '%s'", $params{RESULT});
    }

    if (defined($dir)) {
	$full = $dir . $base;
    } else {
	$full = $base;
    }

    if (-e $full) {
	fatal("result '%s' already exists", $full);
    }

    if (-e $params{RESULT}) {
	fatal("result '%s' already exists", $params{RESULT});
    }

	my %aopts;
	$aopts{LOG} = \&cmdlog;
	$aopts{NODES} = $params{NODES};

	my $allocation = Minion::Pos::Allocation->new($params{ALLOCATION}, %aopts);
	$fleet = Minion::StaticFleet->new([ $allocation->nodes() ]);
	$fleets{(keys(%$fids))[0]} = $fleet;

    $pgrp = Minion::System::Pgroup->new([]);

    foreach $region (keys(%fleets)) {
	if ($fleets{$region}->can('instances')) {
	    message("fetching '%s' in '%s'", $fids->{$region}, $region);
	    $proc = $fleets{$region}->instances();
	    $pgrp->add($proc);
	}
    }

    map { $_->get() } $pgrp->waitall();

    $pgrp = Minion::System::Pgroup->new([]);

    foreach $region (keys(%fleets)) {
	foreach $instance ($fleets{$region}->members()) {
	    message("joining: %s ('%s') ...", $instance->host(), $region);

	    $proc = Minion::System::Process->new(sub {
		while ($instance->execute(
			   [ 'true' ],
			   STDERR => '/dev/null'
		       )->wait()) {
		    sleep(1);
		}
	    });

	    $pgrp->add($proc);
	}
    }

    $pgrp->waitall();

    $gfleet = Minion::StaticFleet->new([
	map { $_->members() } values(%fleets)
    ]);

    $diablo = Minion::StaticFleet->new([
	map { ($_->members())[0] } values(%fleets)
    ]);

    $primary = ($diablo->members())[0];

    $nodes = Minion::StaticFleet->new([
	map { ($_->members())[1 .. (scalar($_->members())-1)] } values(%fleets)
    ]);

    if (grep { $_ eq 'boot' } @{$params{BREAKPOINTS}}) {
	printf("breakpoint: boot\n");
	printf("press ENTER to continue or Ctrl-C to stop");
	local $| = 1;
	<STDIN>;
    }

    $runner = Minion::Run::Runner->new(
	LOCAL  => [ 'script/local/'  ],
	REMOTE => [ 'script/remote/' ]
	);

    if (scalar(@{$params{INSTALLS}}) > 0) {
	unshift(@{$params{INSTALLS}}, [ 'prepare-install' ]);
    }

    foreach $job (@{$params{INSTALLS}}) {
	message("running: '%s' ...", join(' ', @$job));

	$out = '';
	$err = '';
	$proc = $runner->run(
	    $gfleet, $job,
	    STDOUT  => runlog(\$out), STDERR  => runlog(\$err),
	    STDOUTS => runlog(\$out), STDERRS => runlog(\$err)
	    );

	if ($proc->wait() != 0) {
	    printf("%s", $out);
	    printf(STDERR "%s", $err);
	    fatal("failed to run: '%s'", join(' ', @$job));
	}
    }

    if (grep { $_ eq 'install' } @{$params{BREAKPOINTS}}) {
	printf("breakpoint: install\n");
	printf("press ENTER to continue or Ctrl-C to stop");
	local $| = 1;
	<STDIN>;
    }

    if (defined($params{SYNC})) {
	$pgrp = Minion::System::Pgroup->new([]);

	foreach $instance ($diablo->members()) {
	    message("syncing '%s' -> 'synced' on %s ('%s')", $params{SYNC},
		    $instance->public_ip(), $instance->region());

	    $proc = Minion::System::Process->new(sub {
		$instance->execute(
		    [ 'rm', '-rf', 'synced' ],
		    STDERR => '/dev/null'
		    )->wait();

		exit ($instance->send(
			  [ $params{SYNC} ],
			  TARGET => 'synced'
		      )->wait() >> 8);
	    });

	    $pgrp->add($proc);
	}

	if (grep { $_->exitstatus() != 0 } $pgrp->waitall()) {
	    fatal("failed to  sync '%s'", $params{SYNC});
	}
    }

    if (grep { $_ eq 'sync' } @{$params{BREAKPOINTS}}) {
	printf("breakpoint: sync\n");
	printf("press ENTER to continue or Ctrl-C to stop");
	local $| = 1;
	<STDIN>;
    }

    message("register diablo secondaries:");
    foreach $instance ($diablo->members()) {
	message("  %s ('%s')", $instance->host(), $instance->region());
    }
    if ($runner->run($diablo, [ 'behave-diablo', 'secondary' ])->wait() != 0) {
	fatal("failed to register diablo secondaries");
    }

    message("register diablo primary:");
    message("  %s ('%s')", $primary->host(), $primary->region());
    if ($runner->run(
	    $primary, [ 'behave-diablo', 'primary', $workload ]
	)->wait() != 0) {

	fatal("failed to register diablo primary");
    }

    message("register %s nodes:", $chain);
    foreach $instance ($nodes->members()) {
	message("  %s ('%s')", $instance->host(), $instance->region());
    }
    if ($runner->run($nodes, [ 'behave-' . $chain ])->wait() != 0) {
	fatal("failed to register %s nodes", $chain);
    }

    message("deploying ...");
    if ($runner->run($gfleet, [ 'deploy' ])->wait() != 0) {
	fatal("failed to deploy");
    }

    if (grep { $_ eq 'deploy' } @{$params{BREAKPOINTS}}) {
	printf("breakpoint: deploy\n");
	printf("press ENTER to continue or Ctrl-C to stop");
	local $| = 1;
	<STDIN>;
    }

    $pid = $$;

    $SIG{INT} = sub {
	if ($$ == $pid) {
	    message("stopping diablo ...");
	    $runner->run($nodes, [ 'diablo', 'stop' ])->wait();

	    message("killing %s blockchain ...", $chain);
	    $runner->run($nodes, [ $chain, 'kill' ])->wait();
	}

	exit (1);
    };

    message("starting %s blockchain ...", $chain);
    if ($runner->run($nodes, [ $chain, 'start' ])->wait() != 0) {
	fatal("failed to start %s blockchain", $chain);
    }

    if (grep { $_ eq 'chain' } @{$params{BREAKPOINTS}}) {
	printf("breakpoint: chain\n");
	printf("press ENTER to continue or Ctrl-C to stop");
	local $| = 1;
	<STDIN>;
    }

    message("starting diablo ...");
    if ($runner->run($diablo, [ 'diablo', 'start' ])->wait() != 0) {
	fatal("failed to start diablo", $chain);
    }

    message("benchmark is running ...");
    if ($runner->run($diablo, [ 'diablo', 'wait' ])->wait() != 0) {
	fatal("benchmark failed");
    }

    if (grep { $_ eq 'benchmark' } @{$params{BREAKPOINTS}}) {
	printf("breakpoint: benchmark\n");
	printf("press ENTER to continue or Ctrl-C to stop");
	local $| = 1;
	<STDIN>;
    }

    message("stopping %s blockchain ...", $chain);
    if ($runner->run($nodes, [ $chain, 'stop' ])->wait() != 0) {
	fatal("failed to stop %s blockchain", $chain);
    }

    mkdir($full);
    message("saving results in '%s/results.json.gz' ...", $full);
    if ($primary->recv(
	    [ 'deploy/diablo/primary/results.json.gz'],
	    TARGET => $full . '/results.json.gz'
	)->wait() != 0) {

	fatal("failed to save '%s' from %s ('%s') into '%s'",
	      "deploy/diablo/primary/results.json.gz", $primary->public_ip(),
	      $primary->region(), $full . '/results.json.gz');
    }

    system("cd '$full' ; gunzip *.gz");
    system('cp', $workload, $full . '/workload.yaml');

    message("saving chain name in '%s' ...", $full . '/name.txt');
    if (!open($fh, '>', $full . '/name.txt')) {
	fatal("failed to open '%s' : %s", $full . '/name.txt', $!);
    } else {
	printf($fh "%s\n", $chain);
	close($fh);
    }

    $pgrp = Minion::System::Pgroup->new([]);

    message("saving primary logs from %s in '%s' ...", $primary->host(),
	    $full);

    $proc = $primary->recv(
	[ 'deploy/diablo/primary/out' ],
	TARGET => $full . '/diablo-primary-' . $primary->host() .
	          '-out.log'
	);
    $pgrp->add($proc);

    $proc = $primary->recv(
	[ 'deploy/diablo/primary/err' ],
	TARGET => $full . '/diablo-primary-' . $primary->host() .
	          '-err.log'
	);
    $pgrp->add($proc);

    foreach $instance ($diablo->members()) {
	message("saving secondary logs from %s in '%s' ...",
		$instance->host(), $full);

	$proc = $instance->recv(
	    [ 'deploy/diablo/secondary0/out' ],
	    TARGET => $full . '/diablo-secondary-' . $instance->host() .
	              '-out.log'
	    );
	$pgrp->add($proc);

	$proc = $instance->recv(
	    [ 'deploy/diablo/secondary0/err' ],
	    TARGET => $full . '/diablo-secondary-' . $instance->host() .
	              '-err.log'
	    );
	$pgrp->add($proc);
    }

    foreach $instance ($nodes->members()) {
	message("saving node logs from %s in '%s' ...",
		$instance->host(), $full);

	$proc = $instance->recv(
	    [ 'deploy/' . $chain . '/*/out' ],
	    TARGET => $full . '/chain-' . $instance->host() .
	              '-out.log'
	    );
	$pgrp->add($proc);

	$proc = $instance->recv(
	    [ 'deploy/' . $chain . '/*/err' ],
	    TARGET => $full . '/chain-' . $instance->host() .
	              '-err.log'
	    );
	$pgrp->add($proc);
    }

    if (grep { $_->exitstatus() != 0 } $pgrp->waitall()) {
	fatal("failed to save logs");
    }

    message("saving topology in '%s' ...", $full . '/topology.txt');
    if (!open($fh, '>', $full . '/topology.txt')) {
	fatal("failed to open '%s' : %s", $full . '/topology.txt', $!);
    }

    printf($fh "primary:%s:%s\n", $primary->host(), $primary->region());
    foreach $instance ($diablo->members()) {
	printf($fh "secondary:%s:%s\n", $instance->host(),
	       $instance->region());
    }
    foreach $instance ($nodes->members()) {
	printf($fh "blockchain:%s:%s\n", $instance->host(),
	       $instance->region());
    }

    close($fh);

    if (defined($compress)) {
	message("compressing results in '%s' ...", $params{RESULT});

	if (defined($dir)) {
	    $wd = getcwd();
	    chdir($dir);
	}

	system('tar', '--create', '--auto-compress', '--file',
	       $base . $compress, $base);
	system('rm', '-rf', $base);

	if (defined($dir)) {
	    chdir($wd);
	}
    }

    return 0;
}

sub pos_run
{
    my ($chain, $workload, @ids);
    my (@breakpoints, @installs, $result, $sync, $user, @nodes);
    my ($id, %fids, $breakpoint, $allocation);

    GetOptionsFromArray(
	\@_,
	'b|breakpoint=s' => \@breakpoints,
	'i|install=s'    => \@installs,
	'r|result=s'     => \$result,
	'S|sync=s'       => \$sync,
	'n|node=s'           => \@nodes,
	'a|allocation=s' => \$allocation,
	# 'u|user=s'       => \$user,
	'v|verbose'      => sub { $VERBOSE += 1; }
	);

    ($chain, $workload, @ids) = @_;

    if (!defined($chain)) {
	fatal("missing chain operand");
    } elsif (!grep { $chain eq $_ } @RUN_CHAINS) {
	fatal("invalid chain operand: '%s'", $chain);
    } elsif (!defined($workload)) {
	fatal("missing workload operand");
    } elsif (scalar(@ids) == 0) {
	fatal("missing id operands");
    }

    foreach $id (@ids) {
	if ($id =~ /^(sfr(?:-[0-9a-f]+)+)@(..-[^-]+-\d+)$/) {
	    $fids{$2} = $1;
	    next;
	}

	if ($id =~ /^(\d+\.\d+\.\d+\.\d+(?:,\d+\.\d+\.\d+\.\d+)*)@(..-[^-]+-\d+)$/) {
	    $fids{$2} = $1;
	    next;
	}

	fatal("invalid id operand: '%s'", $id);
    }

    if (scalar(@breakpoints) > 0) {
	foreach $breakpoint (@breakpoints) {
	    if (!grep { $breakpoint eq $_ } @RUN_BREAKPOINTS) {
		fatal("invalid value '%s' for '--breakpoint' option",
		      $breakpoint);
	    }
	}
    }

    if (scalar(@installs) == 0) {
	@installs = @RUN_INSTALLS;
    } else {
	@installs = map { [ split(',', $_) ] } @installs;
    }

    if (!defined($result)) {
	$result = $RUN_RESULT->();
    } elsif (-d $result) {
	$result .= '/' . $RUN_RESULT->();
    }

    if (!defined($sync)) {
	$sync = $RUN_SYNC;
    }

    # if (!defined($user)) {
	# $user = $BOOT_USER;
    # }

	if (scalar(@nodes) == 0) {
		fatal("must specify at least one node")
	}

    return _pos_run(
	$chain, $workload, \%fids,
	BREAKPOINTS => \@breakpoints,
	INSTALLS    => \@installs,
	RESULT      => $result,
	SYNC        => $sync,
	NODES => \@nodes,
	ALLOCATION => $allocation,
	# USER        => $user
	);
}

# Boot action -----------------------------------------------------------------

sub _boot
{
    my (%params) = @_;
    my ($images, $secgroups, %fleets, $proc, $pgrp, @procs, $fleet, $instance);
    my ($region, $gfleet, $runner, $job, $out, $err, $deadline, $pid);

    $pid = $$;

    $images = Minion::Aws::find_images(
	$params{IMAGE},
	LOG     => \&cmdlog,
	REGIONS => $params{REGIONS}
	)->get();

    foreach $region (@{$params{REGIONS}}) {
	if (!defined($images->{$region})) {
	    fatal("cannot find image '%s' in '%s'", $params{IMAGE}, $region);
	}
	message("using image: '%s' in '%s'", $images->{$region}->id(),$region);
    }

    $secgroups = Minion::Aws::find_secgroups(
	$params{SECGROUP},
	LOG     => \&cmdlog,
	REGIONS => $params{REGIONS}
	)->get();

    foreach $region (@{$params{REGIONS}}) {
	if (!defined($secgroups->{$region})) {
	    fatal("cannot find security group '%s' in '%s'", $params{SECGROUP},
		  $region);
	}
	message("using security group: '%s' in '%s'", $secgroups->{$region},
		$region);
    }

    $SIG{__DIE__} = sub { kill('INT', 0); };

    $pgrp = Minion::System::Pgroup->new([]);
    $deadline = time() + $params{DURATION};

    foreach $region (@{$params{REGIONS}}) {
	$proc = Minion::Aws::Fleet->launch(
	    $images->{$region}->id(),
	    $params{TYPE},
	    KEY      => $params{KEY},
	    LOG      => \&cmdlog,
	    PRICE    => 2.0,
	    REGION   => $region,
	    SECGROUP => $secgroups->{$region},
	    SIZE     => $params{SIZE},
	    USER     => $params{USER},
	    TIME     => $params{DURATION},
	    );
	$pgrp->add($proc);
    }

    $SIG{INT} = sub {};

    @procs = $pgrp->waitall();

    foreach $proc (@procs) {
	$fleet = $proc->get();
	if (defined($fleet)) {
	    $fleets{$fleet->region()} = $fleet;
	}
    }

    $SIG{INT} = sub {
	if ($$ == $pid) {
	    foreach $region (@{$params{REGIONS}}) {
		if (defined($fleets{$region})) {
		    message("Cancel fleet '%s'", $fleets{$region}->id());
		    $fleets{$region}->cancel()->get();
		}
	    }
	}

	exit (1);
    };

    foreach $region (@{$params{REGIONS}}) {
	if (!defined($fleets{$region})) {
	    map { $_->cancel()->get() } grep { defined($_) } values(%fleets);
	    fatal("failed to launch fleet in '%s'", $region);
	}
	message("using fleet: '%s' in '%s'", $fleets{$region}->id(), $region);
    }

    $pgrp = Minion::System::Pgroup->new([]);

    foreach $region (@{$params{REGIONS}}) {
	foreach $instance ($fleets{$region}->members()) {
	    message("joining: %s ('%s') ...", $instance->public_ip(), $region);

	    $proc = Minion::System::Process->new(sub {
		while ($instance->execute(
			   [ 'true' ],
			   STDERR => '/dev/null'
		       )->wait()) {
		    sleep(1);
		}
	    });

	    $pgrp->add($proc);
	}
    }

    $pgrp->waitall();

    if (defined($params{DISK})) {
	$pgrp = Minion::System::Pgroup->new([]);

	foreach $region (@{$params{REGIONS}}) {
	    foreach $instance ($fleets{$region}->members()) {
		message("resizing: %s ('%s') -> %d GB ...",
			$instance->public_ip(), $region, $params{DISK});

		$proc = $instance->resize($params{DISK});
		$pgrp->add($proc);
	    }
	}

	if (grep { $_->exitstatus() != 0 } $pgrp->waitall()) {
	    map { $_->get() } map { $_->cancel() } values(%fleets);
	    fatal("failed to resize disks");
	}
    }

    $gfleet = Minion::StaticFleet->new([
	map { $_->members() } values(%fleets)
    ]);

    $runner = Minion::Run::Runner->new(
	LOCAL  => [ 'script/local/'  ],
	REMOTE => [ 'script/remote/' ]
	);

    if (scalar(@{$params{INSTALLS}}) > 0) {
	unshift(@{$params{INSTALLS}}, [ 'prepare-install' ]);
    }

    foreach $job (@{$params{INSTALLS}}) {
	message("running: '%s' ...", join(' ', @$job));

	$out = '';
	$err = '';
	$proc = $runner->run(
	    $gfleet, $job,
	    STDOUT  => runlog(\$out), STDERR  => runlog(\$err),
	    STDOUTS => runlog(\$out), STDERRS => runlog(\$err)
	    );

	if ($proc->wait() != 0) {
	    printf("%s", $out);
	    printf(STDERR "%s", $err);
	    map { $_->get() } map { $_->cancel() } values(%fleets);
	    fatal("failed to run '%s'", join(' ', @$job));
	}
    }

    message("fleets ready:");

    foreach $region (@{$params{REGIONS}}) {
	message("  %s: %s", $region, $fleets{$region}->id());
	foreach $instance ($fleets{$region}->members()) {
	    message("    %s", $instance->public_ip());
	}
    }

    printf("fleet ids: %s\n",
	   join(' ', map { $fleets{$_}->id() . '@' . $_ } keys(%fleets)));

    message("fleets remain active until: %04d-%02d-%02d :: %02d-%02d-%02d",
	    (localtime($deadline))[5] + 1900,
	    (localtime($deadline))[4] + 1,
	    (localtime($deadline))[3,2,1,0]);

    message("type Ctrl-C to terminate");

    $SIG{INT} = sub {
	foreach $region (@{$params{REGIONS}}) {
	    message("terminate fleet '%s'", $fleets{$region}->id());
	    $fleets{$region}->cancel()->get();
	}

	message("fleets terminated");

	exit (0);
    };

    sleep($deadline - time());

    message("fleets terminating ...");

    map { $_->get() } map { $_->cancel() } values(%fleets);

    message("fleets terminated");

    return 0;
}

sub boot
{
    my (@err);
    my ($duration, $image, @installs, $key, @regions, $disk, $size, $secgroup);
    my ($type, $user);

    GetOptionsFromArray(
	\@_,
	'd|duration=s'       => \$duration,
	'i|image=s'          => \$image,
	'I|install=s'        => \@installs,
	'k|key=s'            => \$key,
	'r|region=s'         => \@regions,
	'R|resize=s'         => \$disk,
	's|size=s'           => \$size,
	'S|security-group=s' => \$secgroup,
	't|type=s'           => \$type,
	'u|user=s'           => \$user,
	'v|verbose'          => sub { $VERBOSE += 1; }
	);

    @err = @_;

    if (@err) {
	fatal("unexpected operand '" . shift(@err) . "'");
    }

    if (!defined($duration)) {
	$duration = $BOOT_DURATION;
    } elsif ($duration !~ /^\d+$/) {
	fatal("invalid value '%s' for option '--duration'", $duration);
    }

    if (!defined($image)) {
	$image = $BOOT_IMAGE;
    }

    if (scalar(@installs) == 0) {
	@installs = @BOOT_INSTALLS;
    } else {
	@installs = map { [ split(',', $_) ] } @installs;
    }

    if (!defined($key)) {
	$key = $BOOT_KEY;
    }

    if (scalar(@regions) == 0) {
	@regions = @BOOT_REGIONS;
    }

    if (!defined($disk)) {
	$disk = $BOOT_DISK;
    } elsif ($disk !~ /^\d+$/) {
	fatal("invalid value '%s' for option '--resize'", $disk);
    }

    if (!defined($size)) {
	$size = $BOOT_SIZE;
    } elsif ($size !~ /^\d+$/) {
	fatal("invalid value '%s' for option '--size'", $size);
    }

    if (!defined($secgroup)) {
	$secgroup = $BOOT_SECGROUP;
    }

    if (!defined($type)) {
	$type = $BOOT_TYPE;
    }

    if (!defined($user)) {
	$user = $BOOT_USER;
    }

    return _boot(
	DURATION    => $duration,
	IMAGE       => $image,
	INSTALLS    => \@installs,
	KEY         => $key,
	REGIONS     => \@regions,
	DISK        => $disk,
	SIZE        => $size,
	SECGROUP    => $secgroup,
	TYPE        => $type,
	USER        => $user
	);
}


# Pos Boot action -----------------------------------------------------------------

sub _pos_boot
{
    my (%params) = @_;
    my ($images, $secgroups, %fleets, $proc, $pgrp, @procs, $fleet, $node);
    my ($region, $gfleet, $runner, $job, $out, $err, $deadline, $pid, %aopts);
	my ($allocation, $from, $to);

    $pid = $$;

	$aopts{LOG} = \&cmdlog;
	$aopts{NODES} = $params{NODES};
	if (defined($params{KEEP})) {
		$aopts{KEEP} = $params{KEEP};
    }

	$deadline = time() + $params{DURATION} * 60;
	if (defined($params{ALLOCATION})) {
		$allocation = Minion::Pos::Allocation->new($params{ALLOCATION}, %aopts);
    } else {
		if (defined($params{DURATION})) {
			$aopts{DURATION} = $params{DURATION};
		}
		$allocation = Minion::Pos::Allocation->allocate(%aopts)->get();
	}

	$SIG{INT} = sub {
		if ($$ == $pid) {
			# message("Free allocation '%s'", $allocation->id());
			# $allocation->free()->get();
		}

		exit (1);
    };

	message("using allocation: '%s'", $allocation->id());

	if (defined($params{RESET})) {
	$pgrp = Minion::System::Pgroup->new([]);

	my @nodes = $allocation->nodes();
	while (my ($index, $node) = each @nodes) {
	    message("resetting: %s ...", $node->id());

	    $proc = Minion::System::Process->new(sub {
			# my $res;
			# do {
			# $node->reset()->get();
			# $node->bootstrap()->get();
			# 	$res = $node->launch([ 'ip', 'a', 'show', 'eth0' ])->get();
			# } while ($res =~ /does not exist/);
			# $node->launch([ 'bash', '-c', q(echo 0000:01:00.1 > /sys/bus/pci/drivers/ixgbe/bind) ])->get();
			# $node->launch([ 'ip', 'link', 'set', 'dev', 'eth-static', 'up' ])->get();
			$node->launch([ 'bash', '-c', q(ip -6 route add default via $(cat /etc/ilab_control_ipv6)) ])->get();
			$node->launch([ 'bash', '-c', q(ip -4 route add default via $(cat /etc/ilab_control_ipv4)) ])->get();
			# $node->launch([ 'bash', '-c', q(ip -6 route del fe80::/64 dev eth-static) ])->get();
			# $node->launch([ 'bash', '-c', q(ip -6 route add fe80::/64 dev eth-static proto kernel metric 255) ])->get();
			my $oct = $index + 1;
			$node->launch([ 'ip', 'addr', 'add', qq(10.20.30.$oct/24), 'dev', 'eth-static' ])->get();
	    });

	    $pgrp->add($proc);
	}

    $pgrp->waitall();

	$pgrp = Minion::System::Pgroup->new([]);
	foreach $from ($allocation->nodes()) {
	    $proc = Minion::System::Process->new(sub {
		foreach $to ($allocation->nodes()) {
			my $private_ip = $to->private_ip();
			my $host = $to->host();
			$from->launch([ 'bash', '-c', qq(echo '$private_ip $host' >> /etc/hosts) ])->get();
		}
	    });
	    $pgrp->add($proc);
	}
    $pgrp->waitall();

	}

	# install

	$gfleet = Minion::StaticFleet->new([
		$allocation->nodes()
    ]);

	$runner = Minion::Run::Runner->new(
	LOCAL  => [ 'script/local/'  ],
	REMOTE => [ 'script/remote/' ]
	);

	if (scalar(@{$params{INSTALLS}}) > 0) {
	unshift(@{$params{INSTALLS}}, [ 'prepare-install' ]);
    }

    foreach $job (@{$params{INSTALLS}}) {
	message("running: '%s' ...", join(' ', @$job));

	$out = '';
	$err = '';
	$proc = $runner->run(
	    $gfleet, $job,
	    STDOUT  => runlog(\$out), STDERR  => runlog(\$err),
	    STDOUTS => runlog(\$out), STDERRS => runlog(\$err)
	    );

	if ($proc->wait() != 0) {
	    printf("%s", $out);
	    printf(STDERR "%s", $err);
	    map { $_->get() } map { $_->cancel() } values(%fleets);
	    fatal("failed to run '%s'", join(' ', @$job));
	}
    }

	# ready

	message("allocation ready:");

	message("  %s", $allocation->id());
	foreach $node ($allocation->nodes()) {
	    message("    %s", $node->host());
	}

    printf("fleet ids: %s\n",
	   join(' ', map { $fleets{$_}->id() . '@' . $_ } keys(%fleets)));

    message("fleets remain active until: %04d-%02d-%02d :: %02d-%02d-%02d",
	    (localtime($deadline))[5] + 1900,
	    (localtime($deadline))[4] + 1,
	    (localtime($deadline))[3,2,1,0]);

    message("type Ctrl-C to terminate");

    $SIG{INT} = sub {
		# $pgrp = Minion::System::Pgroup->new([]);

		# foreach $node ($allocation->nodes()) {
	    # 	message("stopping: %s ...", $node->id());

	    # 	$proc = Minion::System::Process->new(sub {
		# 		$node->stop()->get();
		# 	});

	    # 	$pgrp->add($proc);
		# }

    	# $pgrp->waitall();

	    # message("free allocation '%s'", $allocation->id());
	    # $allocation->free()->get();

		# message("allocation freed");

		exit (0);
    };

    sleep($deadline - time());

	# $pgrp = Minion::System::Pgroup->new([]);

	# foreach $node ($allocation->nodes()) {
	# 	message("stopping: %s ...", $node->id());

	# 	$proc = Minion::System::Process->new(sub {
	# 		$node->stop()->get();
	# 	});

	# 	$pgrp->add($proc);
	# }

	# $pgrp->waitall();

    # message("freeing allocation ...");

    # $allocation->free()->get();

    # message("allocation freed");

    return 0;
}

sub pos_boot
{
    my (@err);
    my ($duration, $keep, $allocation, $reset, @installs, @nodes, %opts); # , $key, @regions, $disk, $size, $secgroup, $type, $user

    GetOptionsFromArray(
	\@_,
	'd|duration=s'       => \$duration,
	# 'i|image=s'          => \$image,
	'I|install=s'        => \@installs,
	'n|node=s'           => \@nodes,
	'k|keep' => \$keep,
	'a|allocation=s' => \$allocation,
	'r|reset' => \$reset,
	'v|verbose'          => sub { $VERBOSE += 1; }
	);

    @err = @_;

    if (@err) {
	fatal("unexpected operand '" . shift(@err) . "'");
    }

    if (defined($duration)) {
		if ($duration !~ /^\d+$/) {
			fatal("invalid value '%s' for option '--duration'", $duration);
		}
		$opts{DURATION} = $duration;
    }

	if (defined($keep)) {
		$opts{KEEP} = $keep;
    }

	if (defined($reset)) {
		$opts{RESET} = $reset;
    }

	if (defined($allocation)) {
		$opts{ALLOCATION} = $allocation;
    }

    # if (!defined($image)) {
	# $image = $BOOT_IMAGE;
    # }

    if (scalar(@installs) == 0) {
	@installs = @BOOT_INSTALLS;
    } else {
	@installs = map { [ split(',', $_) ] } @installs;
    }
	$opts{INSTALLS} = \@installs;

	if (scalar(@nodes) == 0) {
		fatal("must specify at least one node")
	}
	$opts{NODES} = \@nodes;

    return _pos_boot(%opts);
}


# Prepare action --------------------------------------------------------------

sub _prepare
{
    my (%params) = @_;
    my ($image, $secgroup, $fleet, $instance, $proc, $pgrp, $runner, $job);
    my ($out, $err, $region, @procs, $pid);

    $pid = $$;

    if ($params{BASE} =~ /^ami-[0-9a-f]+$/) {
	$image = Minion::Aws::Image->new(
	    $params{BASE},
	    LOG    => \&cmdlog,
	    REGION => $params{REGION}
	    );

	if (!defined($image->name())) {
	    fatal("cannot find image '%s' in '%s'", $params{BASE},
		  $params{REGION});
	}
    } else {
	$image = Minion::Aws::find_images(
	    $params{BASE},
	    LOG     => \&cmdlog,
	    REGIONS => [ $params{REGION} ]
	    )->get();

	if (defined($image->{$params{REGION}})) {
	    $image = $image->{$params{REGION}};
	} else {
	    fatal("cannot find image '%s' in '%s'", $params{BASE},
		  $params{REGION});
	}
    }

    message("using image: '%s'", $image->id());

    if ($params{SECGROUP} =~ /^sg-[0-9a-f]+$/) {
	$secgroup = $params{SECGROUP};
    } else {
	$secgroup = Minion::Aws::find_secgroups(
	    $params{SECGROUP},
	    LOG     => \&cmdlog,
	    REGIONS => [ $params{REGION} ]
	    )->get();

	if (defined($secgroup->{$params{REGION}})) {
	    $secgroup = $secgroup->{$params{REGION}};
	} else {
	    fatal("cannot find security group '%s' in '%s'", $params{SECGROUP},
		  $params{REGION});
	}
    }

    message("using security group: '%s'", $secgroup);

    $SIG{__DIE__} = sub { kill('INT', 0); };

    $fleet = Minion::Aws::Fleet->launch(
	$image->id(),
	$params{TYPE},
	KEY      => $params{KEY},
	LOG      => \&cmdlog,
	PRICE    => 1.0,
	REGION   => $params{REGION},
	SECGROUP => $secgroup,
	SIZE     => $params{SIZE},
	USER     => $params{USER}
	);

    $SIG{INT} = sub {};

    $fleet = $fleet->get();

    $SIG{INT} = sub {
	if (($$ == $pid) && defined($fleet)) {
	    message("cancel fleet '%s'", $fleet->id());
	    $fleet->cancel()->get();
	}

	exit (1);
    };

    if (!defined($fleet)) {
	fatal("failed to launch fleet");
    }

    message("using fleet: '%s'", $fleet->id());

    $pgrp = Minion::System::Pgroup->new([]);

    foreach $instance ($fleet->members()) {
	message("joining: %s ...", $instance->public_ip());

	$proc = Minion::System::Process->new(sub {
	    while ($instance->execute(['true'],STDERR=>'/dev/null')->wait()) {
		sleep(1);
	    }
	});

	$pgrp->add($proc);
    }

    if (grep { $_->exitstatus() != 0 } $pgrp->waitall()) {
	$fleet->cancel()->get();
	fatal("failed to join instances");
    }

    if (defined($params{DISK})) {
	$pgrp = Minion::System::Pgroup->new([]);

	foreach $instance ($fleet->members()) {
	    message("resizing: %s -> %d GB ...", $instance->public_ip(),
		    $params{DISK});

	    $proc = $instance->resize($params{DISK});
	    $pgrp->add($proc);
	}

	if (grep { $_->exitstatus() != 0 } $pgrp->waitall()) {
	    $fleet->cancel()->get();
	    fatal("failed to resize disks");
	}
    }

    $runner = Minion::Run::Runner->new(
	LOCAL  => [ 'script/local/'  ],
	REMOTE => [ 'script/remote/' ]
	);

    if (scalar(@{$params{ALLINSTALLS}}) > 0) {
	unshift(@{$params{ALLINSTALLS}}, [ 'prepare-install' ]);
    } elsif (scalar(@{$params{INSTALLS}}) > 0) {
	unshift(@{$params{INSTALLS}}, [ 'prepare-install' ]);
    }

    foreach $job (@{$params{ALLINSTALLS}}) {
	message("running: '%s' ...", join(' ', @$job));

	$out = '';
	$err = '';
	$proc = $runner->run(
	    $fleet, $job,
	    STDOUT  => runlog(\$out), STDERR  => runlog(\$err),
	    STDOUTS => runlog(\$out), STDERRS => runlog(\$err)
	    );

	if ($proc->wait() != 0) {
	    printf("%s", $out);
	    printf(STDERR "%s", $err);
	    $fleet->cancel()->get();
	    fatal("failed to run '%s'", join(' ', @$job));
	}
    }

    $instance = ($fleet->members())[0];

    foreach $job (@{$params{INSTALLS}}) {
	message("running: '%s' ...", join(' ', @$job));

	$out = '';
	$err = '';
	$proc = $runner->run(
	    $instance, $job,
	    STDOUT  => runlog(\$out), STDERR  => runlog(\$err),
	    STDOUTS => runlog(\$out), STDERRS => runlog(\$err)
	    );

	if ($proc->wait() != 0) {
	    printf("%s", $out);
	    printf(STDERR "%s", $err);
	    $fleet->cancel()->get();
	    fatal("failed to run '%s'", join(' ', @$job));
	}
    }

    $pgrp = Minion::System::Pgroup->new([]);
    $image = Minion::Aws::find_images(
	$params{NAME},
	LOG => \&cmdlog
	)->get();

    foreach $region (keys(%$image)) {
	if (!defined($image->{$region})) {
	    next;
	}

	message("deleting image: '%s' in '%s' ...", $image->{$region}->id(),
		$region);

	$proc = $image->{$region}->delete();
	$pgrp->add($proc);
    }

    if (grep { $_->exitstatus() != 0 } $pgrp->waitall()) {
	$fleet->cancel()->get();
	fatal("failed to delete old images");
    }

    message("saving image: %s ...", $instance->public_ip());

    $image = $instance->snapshot(
	$params{NAME},
	DESCRIPTION => $params{DESCRIPTION}
	)->get();

    if (!defined($image)) {
	$fleet->cancel()->get();
	fatal("failed to save image");
    }

    while ($image->status()->get() eq 'pending') {
	sleep(10);
    }

    message("saved image: '%s' in '%s'", $image->id(), $params{REGION});

    $pgrp = Minion::System::Pgroup->new([]);

    foreach $region (grep { $_ ne $params{REGION} } @{$params{REGIONS}}) {
	message("spreading image: '%s' to '%s' ...", $image->id(), $region);

	$proc = $image->copy(
	    $params{NAME},
	    DESCRIPTION => $params{DESCRIPTION},
	    REGION      => $region
	    );

	$pgrp->add($proc);
    }

    @procs = $pgrp->waitall();

    if (grep { $_->exitstatus() != 0 } @procs) {
	$fleet->cancel()->get();
	fatal("failed to spread '%s'", $image->id());
    }

    foreach $image (map { $_->get() } @procs) {
	message("copy image: '%s' in '%s'", $image->id(), $image->region());
    }

    $fleet->cancel()->get();

    message("fleet terminated");

    return 0;
}

sub _prepare_usage
{
    return <<"EOF";
Usage: $0 prepare [--base=<img-name>] [--security-group=<sg-name>]
         [--key=<key-name>] [--user=<str>] [--type=<type-name>] [--size=<int>]
         [--region=<reg-name>] [--resize=<int>] [--install=<spec>...]
         [--all-install=<spec>...] [--duration=<int>] [--name=<str>]
         [--description=<str>] [--install-region=<reg-name>...]

Prepare a new AWS image (AMI) with a set of pre-installed programs on it.

Start by booting a fleet of AWS instances from a base image. These instances
then run a list of minion scripts. One of the instances, the leader, run
additional scripts.
When everything is installed, the leader disk is saved as a new image. This
image is optionally made available in many AWS regions.

Options:

  -a <spec>, --all-install=<spec>    Run the minion script <spec> on all
                                     instances. The value <spec> is the name
                                     of the script, optionally followed by its
                                     arguments, separated by ',' signs.

  -b <img>, --base=<img>             Use the AWS image <img> as a base for the
                                     instances to boot. If <img> starts with
                                     'ami-' then it is an AWS image identifier,
                                     otherwise, look for an image with a name
                                     or description matching the <img> regex.

  -d <int>, --duration=<int>         Keep instances alive for <int> seconds
                                     during the install phase.

  -D <str>, --description=<str>      Save the new image with <str> as its
                                     description.

  -h, --help                         Print this message and exit.

  -i <spec>, --install=<spec>        Run the minion script <spec> on the leader
                                     instance only. The value <spec> is the
                                     name of the script, optionally followed by
                                     its arguments, separated by ',' signs.

  -k <key>, --key=<key>              Boot instances with the given <key> SSH
                                     key as an authorized key. The string <key>
                                     is the name of the SSH public key on the
                                     AWS side.

  -n <str>, --name=<str>             Save the new image with <str> as its name.

  -r <reg>, --region=<reg>           Boot instances in the specified <reg> AWS
                                     region.

  --resize=<int>                     Resize instances disk to <int> GB before
                                     to run any install scripts.

  -R <reg>, --install-region=<reg>   After saving the new image, copy it to
                                     the AWS region <reg>. This option can be
                                     specified multiple times.

  -s <int>, --size=<int>             Boot <int> instances to run the install
                                     scripts. Only one is leader.

  -S <sg>, --security-group=<sg>     Boot the instances under the specified
                                     <sg> security group. If <sg> starts with
                                     'sg-' then it is the identifier of the
                                     security group to use. Otherwise, find a
                                     security group with a name matching the
                                     <sg> regex.

  -t <type>, --type=<type>           Boot instances of the specified <type> AWS
                                     instance type.

  -u <str>, --user=<str>             Use <str> as a username to connect to the
                                     instances through SSH.

  -v, --verbose                      Increase verbosity level. This option can
                                     be specified multiple times.
EOF
}

sub prepare
{
    my (@err);
    my ($base, $duration, $disk, @installs, $key, $name, @regions, $region);
    my ($size, $secgroup, $user, $type, @allinstalls, $description);

    GetOptionsFromArray(
	\@_,
	'a|all-install=s'    => \@allinstalls,
	'b|base=s'           => \$base,
	'd|duration=s'       => \$duration,
	'D|description=s'    => \$description,
	'h|help'             => sub { printf("%s",_prepare_usage());exit(0); },
	'i|install=s'        => \@installs,
	'k|key=s'            => \$key,
	'n|name=s'           => \$name,
	'r|region=s'         => \@regions,
	'resize=s'           => \$disk,
	'R|install-region=s' => \$region,
	's|size=s'           => \$size,
	'S|security-group=s' => \$secgroup,
	't|type=s'           => \$type,
	'u|user=s'           => \$user,
	'v|verbose'          => sub { $VERBOSE += 1; }
	);

    @err = @_;

    if (@err) {
	fatal("unexpected operand '" . shift(@err) . "'");
    }

    if (scalar(@allinstalls) == 0) {
	@allinstalls = @PREPARE_ALLINSTALLS;
    } else {
	@allinstalls = map { [ split(',', $_) ] } @allinstalls;
    }

    if (!defined($base)) {
	$base = $PREPARE_BASE;
    }

    if (!defined($duration)) {
	$duration = $PREPARE_DURATION;
    } elsif ($duration !~ /^\d+$/) {
	fatal("invalid value '%s' for option '--duration'", $duration);
    }

    if (!defined($description)) {
	$description = $PREPARE_DESCRIPTION;
    }

    if (!defined($disk)) {
	$disk = $PREPARE_DISK;
    } elsif ($disk !~ /^\d+$/) {
	fatal("invalid value '%s' for option '--resize'", $disk);
    }

    if (scalar(@installs) == 0) {
	@installs = @PREPARE_INSTALLS;
    } else {
	@installs = map { [ split(',', $_) ] } @installs;
    }

    if (!defined($key)) {
	$key = $PREPARE_KEY;
    }

    if (!defined($name)) {
	$name = $PREPARE_NAME;
    }

    if (scalar(@regions) == 0) {
	@regions = @PREPARE_REGIONS;
    }

    if (!defined($region)) {
	$region = $PREPARE_REGION;
    }

    if (!defined($size)) {
	$size = $PREPARE_SIZE;
    } elsif ($size !~ /^\d+$/) {
	fatal("invalid value '%s' for option '--size'", $size);
    }

    if (!defined($secgroup)) {
	$secgroup = $PREPARE_SECGROUP;
    }

    if (!defined($type)) {
	$type = $PREPARE_TYPE;
    }

    if (!defined($user)) {
	$user = $PREPARE_USER;
    }

    return _prepare(
	ALLINSTALLS => \@allinstalls,
	BASE        => $base,
	DURATION    => $duration,
	DESCRIPTION => $description,
	DISK        => $disk,
	INSTALLS    => \@installs,
	KEY         => $key,
	NAME        => $name,
	REGIONS     => \@regions,
	REGION      => $region,
	SIZE        => $size,
	SECGROUP    => $secgroup,
	TYPE        => $type,
	USER        => $user
	);
}


# Main script -----------------------------------------------------------------

sub usage
{
    return <<"EOF";
Usage: $0 [-h | --help] <action>

Prepare, boot and use AWS instances to run blockchain benchmarks.
Please type '$0 <action> --help' for more details about a specific action.

Available actions:

  prepare      Prepare an AWS image with all the necessary software already
               installed.

  boot         Boot a set of AWS instances, possibly in several datacenters.
               Can perform additional install if necessary.

  run          Run a blockchain benchmark from a booted set of AWS instances.

Options:

  -h, --help   Print this message and exit.

EOF
}

sub main
{
    my ($action, @args);

    Getopt::Long::Configure('bundling');
    Getopt::Long::Configure('require_order');

    GetOptionsFromArray(
	\@_,
	'h|help'    => sub { printf("%s", usage()); exit (0); },
	'v|verbose' => sub { $VERBOSE += 1; }
	);

    Getopt::Long::Configure('permute');

    ($action, @args) = @_;

    if (!defined($action)) {
	fatal("missing action operand");
    }

    if ($action eq 'prepare') {
	return prepare(@args);
    }

    if ($action eq 'boot') {
	return boot(@args);
    }

    if ($action eq 'run') {
	return run(@args);
    }

	if ($action eq 'pos') {
		($action, @args) = @args;
		if ($action eq 'boot') {
		return pos_boot(@args);
		}

		if ($action eq 'run') {
		return pos_run(@args);
    	}
	}

    fatal("unknown action operand: '%s'", $action);
}

exit (main(@ARGV));
__END__
